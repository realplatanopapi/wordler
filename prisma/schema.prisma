datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String? @unique
  twitterId String? @unique
  displayName String

  groupMemberships GroupMembership[]
  results WordleResult[]

  createdGroupInviteCodes GroupInviteCode[]
}

model Wordle {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date DateTime @unique
  number BigInt @unique

  results WordleResult[]
}

model WordleResult {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wordle Wordle @relation(fields: [wordleId], references: [id], onDelete: Cascade)
  wordleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  didSolve Boolean
  attemptsUsed Int
  maxAttempts Int
  score Int

  // 2D array of guesses
  guesses Json

  // Ensure user's can't have more than one Wordle Result for a single Wordle. 
  @@unique([userId, wordleId])
}

model Group {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships GroupMembership[]
  inviteCodes GroupInviteCode[]

  name String
  slug String @unique
}

enum GroupRole {
  ADMIN
  MEMBER
}

model GroupMembership {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  role GroupRole

  // Ensure users can only join one Group at a time
  @@unique([userId, groupId])
}

model GroupInviteCode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code String @unique

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
}
